#-*-  coding:utf-8  -*-

1.Installation and instruction
  1.1 Advanced programming languages usually provide a relatively complete base code library that allows you to call directly.Python provides us with code libraries covering the network,files,GUI,database,text and so on.In addtion to the built-in liarbry,Python also has a large number of third-party libraries;
  1.2 Installation
    a.'python-3.5.2-amd64',and remember to check "Add Python 3.5 to PATH",then click 'Install Now' and it's OK;
	b.After Installation,'Win+R','cmd',enter'python'and '>>>'occurs show that installing successfully;
	c.Files in Python:end with '.py',which need interpreter to execute;There're many interpreters such as IPython,PyPy,Jython and IronPython, but the most popular is CPython come with installation originally.
  1.3 Insructions
    a.'Command line' mode and 'Python interactive' mode: 
	  'Command line': shows 'C:\>',execute '.py' files(enter'python',and come to the later mode);
	        #wead:run the whole codes in one time,and less interactive;
	  'Interactive': shows '>>>',results will be shown immediately whenever you enter the codes;
	        #weak:can not save,click the codes again whenever you want to run;
	b.Text editor
	  advice you to use Notepad++,Word and notebook from windows are forbidden;
	        #from discussions above,there's a good way: Writing codes in the Notepad++ while open interactive window at the same time,copy part of the codes to command lines for vertification if needed, great idea!
2.Operation
  2.1 print and input
      >>>input()
      >>>print()
	  >>>exit()                 #exit from 'Python interactive'mode to 'command line'mode;
	  >>>print('hello, world')  #'string' must enter with '';
	  >>>print('The quick brown fox','jumps over','the lazy dog')    #',' denotes 'space' in the results;
	  >>>print(300)             #no need to enter 'Integer' with ''; 
	  >>>print('100 + 200 =',100+200)                                #the formal denotes 'string' rather than 'integer';
	  >>>name=input('Please enter your name: ')                      #'xxx' denotes prompt informatin which is better than not;
	     print('Hello,',name)
  2.2 indentation
      When statement end with ':',the next indentation is regarded as 'code block';
            #strength:fored to write format codes;You'd better to resist "4 spaces" indentation in Notepad++;	          
	        #weak:'copy-paste' is not supported,you must check indentation after paste;
      Sensitive to uppercase letters and lowercase ones,pay attention to it;
	  Set up 'Tab' equals '4 spaces' in Notepad++ and don't mix them.
  2.3 Data type and variables
    a.Integer: >>>100
	           >>>-8080
			   >>>0xa5b4c3d2            #Hexadecimal is more convinient in computer sometimes beginnig with '0x';
			                            #there's no size limitation in integer different from other languages;
	b.Float:   >>>1.23
			   >>>1.2e-5
			   >>>4.52e9                #integer is always accurate,while float is a litter error sometimes;
			                            #there's no size limitation too,but too large shows 'inf'!
	c.String:  >>>"I'm OK!"             #I'm OK!
	           >>>'I\' \"OK\"!'         #I'm "OK"! There're many escaped characters such as '\n','\t','\\';
			   >>>print(r'\\\t\\')      #\\\t\\, not escaped;
			   >>>print('''line1
			   ...line2
			   ...line3''')             #mulity lines;
    d.Boolean: >>>True and False        #False
	           >>>True or False         #True
			   >>>not True              #False
			   >>>3>5                   #False
			   >>>not 3>5               #True
    e."Nnoe":  a special value, not equals to 0;
	                                    #many other data types such as list,dictionary,customize et al,in the following;
	f.Variables:
	           dynamic language which means a variable can be assigned many times,even with different data type.
	g.Constants:
	           in general,we use names all with uppercase letters to denote constant,like: 
			   >>>PI=3.14159265359;
    f.Addtions about division:
	           >>>10/3                  #3.333333333333335
	           >>>9/3                   #3.0
			   >>>10//3                 #3
			   >>>10%3                  #1
  2.4 String and coding
    a.ASCII:   #One bytes; contains 127 characters(Enlish letters,numbers and some symbols);
	  Unicode: #Two bytes in general; support all the languages in the world of course Chinese;
	  UTF-8:   #Changed length bypes(considering RAM), and in fact it contains ASCII; 
	           #In mordern computer society, Unicode used in RAM while UTF-8 used in transporting;
			   #and they are transformed into the other when saving or transporting;
	b.Python with Unicode(that is, support many languages)
	           >>>print('包含中文的str')
			   >>>ord('A')              #get the integer representations of the character 'A' in Unicode;
			   >>>ord('中')
			   >>>chr(66)               #get the character representations of the integer '66' in Unicode;
			   >>>chr(25991)
    c.Encode() and Decode()
	           >>>'ABC'.encode('ascii')  #'str' in RAM with Unicode(like 'ABC'), 'bytes' in transporting with UTF-8(like b'ABC');
			   >>>'中文'.encode('utf-8') #str '中文' transform into bypes in UTF-8;
			   >>>b'ABC'.decode('ascii') #bypes 'ABC' transform into str in ASCII;
			   >>>b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')
	d.length   >>>len('ABC')             #how many characters dose string'ABC' contain;
	           >>>len('中文')
    f.Most important(ensure there're no messy codes in Chinese)!!!
	           #Persist transform between str adn bypes with UTF-8,that is: When writing Notepad++;
			   #the first line is "#-*- coding: utf-8 -*-" and ensure "Encode in UTF-8 without BOM" in Notepad++;
	g.Format:  >>>'Hi, %s, you have $%d'%('Bob',100000)   #'%d'(integer),'%f'(float),'%s'(string),'%x'(for hexadecimal);
	           >>>'%3d-----%05d'%(8,8)                    #'  8-----00008';
			   >>>'%.2f'%3.1415926                        #'3.14'
			   >>>'Age:%s;Gender:%s'%(25,True)            #'%s'always in work if you don't know what to use, all chnge to string;
			   >>>'growth rate: %d %%'%89                 #'growth rate: 89%';
  2.5 Another two data types: list and tuple
    a.list(can change)
	           >>>classmate=['Michael','Bob','Tracy']     
			   >>>len(classmate)                          #3
			   >>>classmate[0]                            #'Michael'
			   >>>classmate[2]                            #'Tracy'
			   >>>classmate[-1]                           #'Tracy'
			   >>>classmate[-3]                           #'Michael'
			   >>>classmate.append('Adam')                #['Michael','Bob','Tracy','Adam']; an append an element in the end;
			   >>>classmate.insert(1,'Jack')              #['Michael','Jack','Bob','Tracy','Adam']
			   >>>classmate.pop(1)                        #['Michael','Bob','Tracy','Adam'];delete the element in '1' position;
			   >>>classmate.pop()                         #['Michael','Bob','Tracy']; delete the last element;
			   >>>classmate[1]='Sarah'                    #['Michael','Sarah','Tracy']
			   >>>L=['Apple',1234,True]                   #different data types in a list;
			   >>>s=['python','java',['asp','php'],'scheme']        #one list is in another list; s[2][1]='php';
			   >>>L=[]                                    #empty list, len(L)=0;
			   >>>['c','b','a'].sort()                    #['a','b','c'];
	b.tuple(cannot change)                 
	           >>>classmate=('Michael','Bob','Tracy')     
			   >>>classmate[0]
			   >>>classmate[-1]                           #just index, cannot append,insert,pop or assignment;
			   >>>t=()                                    #empty tuple;
			   >>>t=(1,)                                  #tuple with only one element; ','is needed; t=(1)=1 otherwise;
			   >>>t=('a','b',['A','B'])                   
			      t[2][0]='X'
				  t[2][1]='Y'
			   >>>t                                       #('a','b',['X','Y']);tuple cannot change while list can change;
  2.6 conditional judgement
	           #if <condition1>:<operation1>; elif<condition2>:<operation2>; else:<peration3>; note that Python use INDENTATION;
	           #don't forget ':';
	           >>>if x:
			          print('True')                       #the condition can be wrote shortening;
			   >>>birth=int(input());                     #input() return 'str',int()/float() can change it to integer/float;
  2.7 loop:
               >>>list(range(10))                         #[0,1,2,3,4,5,6,7,8,9]
			   >>>sum=0
			      for x in [1,2,3,4,5,6,7,8,9,10]:
					sum=sum+x
				  print(sum)                              #sum from 0 to 10;
			   >>>sum=0
			      for x in range(101):
					sum=sum+x
				  print(sum)                              #sum from 0 to 100;
			   >>>sum=0
			      n=99
				  while n>0:
					sum=sum+n
					n=n-2
				  print(sum)                              #sum 1,3,5,...,99;
			   >>>n=1
			      while n<=100:
					print(n)
					n=n+1
				  print('END')                            #1,2,3,...,100,END;
			   >>>n=1
			      while n<=100:
					if n>10:
						break                             #'break': end the loop in advance;
					print(n)
					n=n+1    
				  print('END')                            #1,2,3,4,5,6,7,8,9,10,END;
			   >>>n=0
			      while n<10:
					n=n+1
					if n%2==0:
						continue                          #'continue': end current loop and continue with next loop;
					print(n)                              #1,3,5,7,9;
		       #in general,'break' and 'continue' must cooperate with 'if';
			   #Don't use 'break' and 'continue' abusely,most loops don't need them or can change to a form without them;
			   #Sometimes 'dead loops' occurs, and 'Ctrl+C' quit;
  2.8 Dict and Set
    a.         >>>a={'Michael':95,'Bob':75,'Tracy':85}    #creat a dictionary;
			   >>>a['Michael']                            #show the value through the key;
			   >>>a['Adam']=67                            #add new element;
			   >>>a['Bob']=98                             #change value of an exist key;
			   >>>a.get('Thomas',-1)                      #check if "Thomas" in keys, if not,return -1;
			   >>>a.pop('Bob')                            #delete element;
			           #there's no order in dictionary; dict use 'space' to swap 'time';
					   #dict in conditions need to search "quickly",One thing to remember is KEY cannot change;
					   #That is, 'String' and 'Integer' can be keys while 'List' cannot;
    b.Set      >>>b=set([1,2,3])                          #creat set; a set of keys like dict except without values;
	           >>>b=set([1,1,2,2,3])                      #{1,2,3}; keys in set cannot repeat;
			   >>>b.add(5)                                #{1,2,3,5};
			   >>>b.remove(3)                             #{1,2,5};
			   >>>s1=set([1,2,3])
			      s2=set([2,3,4])
				  s1&s2                                   #{2,3};
				  s1|s2                                   #{1,2,3,4};
			                                              #'string' and 'integer' can be elements while 'list' cannot;
	c.Does String really cannot change?
               >>>a='abc'
			      a.replace('a','A')
			   'Abc'
			   >>>a                                       #'abc';
3.Functions
  3.1 call on built-in functions
               #help(abs) check informations and all the built-in functions: https://docs.python.org/3/library/functions.html#abs ;
			   >>>abs(-20)                                #20;
			   >>>max(20,34,-5,29308)                     #29308;
			   >>>int('123')                              #123
			   >>>int(12.34)                              #12
			   >>>float('12.34')                          #12.34
			   >>>str(1.23)                               #'1.23'
			   >>>str(100)                                #'100'
			   >>>bool(1)                                 #True
			   >>>bool('')                                #False
			   >>>c=abs
			      c(-2)                                   #2; assign a function with a nickname;
			   >>>hex(255)                                #'0xff';
			   #if there're wrongs when calling on the functions, learn to see the English messages;
  3.2 definition functions
               >>>def move(x,y,step,angle=0):             #set initial value for parameters;
					import math                           #import built-in pack if needed;
					nx=x+step*math.cos(angle)             
					ny=y-step*math.sin(angle)
					return nx,ny                          #more values with only one 'return' for codes end after meet first one;
			   >>>x,y=move(100,100,60,math.pi/6)          #the return values are in a tuple!
			   >>>def myabs(x):
					if not isinstance(x,(int,float)):     #You'd better to check the data type first!
						raise TypeError('bad operand type')
					if x>=0:
						return x
					else:
						return -x                         #I have to emphasize again that 'Tab','space' can not mixed in Notepad++;
			   #if the 'xxx.py' with only customize functions, check the directory first and 'from xxx import <func_name>';
			   >>def nop():
					pass                                  #nothing to do;
			   >>>if age>=18:
					pass                                  #'pass'as placeholder,can add sth later,will be error without it;
  3.3 parameters of a function
    a.位置参数
	           >>>def power(x,n):
					s=1
					while n>0:
						n=n-1
						s=s*x
					return s
			   >>>power(5,3)
	b.默认参数
	           >>>def enroll(name,gender,age=6,city='Beijing'):
					print('name:',name)
					print('gender:',gender)
					print('age:',age)
					print('city:',city)
			   >>>enroll('Sarah','female',city='Tianjin') #位置参数在前，默认参数在后;
			                                              #默认参数必须指向不变对象；
    c.可变参数
	           >>>def calc(*numbers):
					sum=0
					for n in numbers:
						sum=sum+n*n
					return sum
			   >>>calc(1,3,4,5,6)                         #接收任意个参数，内部接收的是一个tuple;
			   >>>n=(1,3,4,6,7,7,3,4,5,6,2,3)     
			      calc(*n)                                #把list或tuple作为可变参量输进去，常见且相当有用;
	d.命名关键字参数
	           >>>def person(name,age,*,city,job):
					print(name,age,city,job)
			   >>>person('Jack',34,city='Beijing',job='Engineer')   #'*'后的是命名关键字参数,必须传入参数名，这和前的位置参数不同;
	e.关键字参数
	           >>>def person(name,age,**kw):
					print(name,age,kw)
			   >>>person('Bob',45,city='Beijing,job='Engineer')     #关键字参数，可以传入任意个数;
			   >>>e={'city':'Beijing','job':'Scientist'}
			      person('Jack',56,**e)                             #相当有用的写法;
    f.summarize and application                            #参数组合的顺序必须是：位置，默认，可变，命名关键字，关键字参数;
	           >>>def f1(a,b,c=0,*args,**kw):
					print(a,b,c,args,kw)
			   >>>def f2(a,b,c=0,*,d,**kw):
					print(a,b,c,d,kw)
			   >>>f2(1,2,d=99,ext=98)
			   >>>f1(3,4,'a','b',r=4,t=9)
			   >>>args1=(1,2,3,4,5,6,7)
			      kw1={'x':3,'y':3'}
				  f1(*args1,**kw1)                         #args1这个tuple的长度可以任意，因为*args就接收tuple;
			   >>>args2=(2,3,4)
			      kw2={'x':3,'d':6}
				  f2(*args2,**kw2)                         #args2长度只能是3，因为其后的命名关键字参数必须写关键字,即d=xxx,且kw必须包含'd':xxx;
			   ###对于任意函数，都可以通过类似'func(*args,**kw)的方式调用，无论其参数怎样定义；
			   ###*args是可变参数，接收tuple；**kw是关键字参数，接收dict；*args和**kw是默认的习惯写法；
			   >>>def hello(greeting,*args):
					if len(args)==0:
						print('%s!'%greeting)
					else:
						print('%s, %s!'%(greeting,', '.join(args)))
			   >>>def score(**kw):
					print('   Name Score')
					print('-------------')
					for name,score in kw.items():          #'.items()'的使用
						print('%10s  %d'%(name,score))
					print()
			   >>>def info(name,*,gender,city='Beijing',age):
					print('Personal Info')
					print('-------------')
					print('    Name: %s'%name)
					print('  Gender: %s'%gender)
					print('    City: %s'%city)
					print('     Age: %s'%age)
	                print()                                #'print()'的使用
  3.4 Recursion functions
               >>>def fact(n):
					if n==1:
						return 1
					else:
						return n*fact(n-1)                 #递归的逻辑比循环清晰，但是要防止溢出;
4. Advanced features
  4.1  在Python中，代码不是越复杂越好，而是越简单越好；代码越少，开发效率越高；1行代码能解决绝不用5行；
  4.2 Slice
               >>>L=list(range(100))                       #Slice十分有用，创建0-99的序列；
			   >>>L[:10]             
			   >>>L[-10:]
			   >>>L[10:20]
			   >>>L[:10:2]
			   >>>L[::5]
			   >>>L[:]
			   >>>(1,2,3,4,5)[:3]
			   >>>'ABCDFRG'[:3:2]
  4.3 Iteration(对list，tuple，dict,string通过for循环来遍历，称为迭代)
               >>>d={'a':1,'b':2'c':3}
			      for key in d:
					print(key)
				  for value in d.values():
					print(value)
				  for k,v in d.items():
					print(k,v)                              #分别迭代dict的key，values，key和values;
			   >>>for a in 'ABC':                           #迭代字符串;
					print(a)
			   >>>for a,b in enumerate(['a','b','c'])       #对list迭代很简单，但希望出现下标,用'enumerate';
					print(a,b)
			   >>>for x,y in [(1,1),(2,4),(3,9)]:           #同时引用两个变量;
					print(x,y)
			   >>>from collections import Iterable:
				  isinstance('abd',Iterable)
				  isinstance([1,2,3],Iterable)
				  isinstance(123,Iterable)                  #判断一个对象是否是可迭代对象; 
  4.4 List comprehensions(运用列表生成式可以快速生成list，代码十分简洁)
               >>>[x*x for x in range(1,11)]
			   >>>[x*x for x in range(1,11) if x%2==0]
			   >>>[m+n for m in 'ABS' for n in 'XDE']       #两层循环，三层及以上很少用到;
			   >>>import os
			      [d for d in os.listdir('.')]              #列出当前目录下的所有文件和目录名;
			   >>>d={'x':1,'y':2,'z':3}
			      [k+'='+v for k,v in d.items()]
			   >>>L=['Hello','World','IBM','Apple']
			      [s.lower() for s in L]                    #把list中的所有字符串变成小写;
			   >>>L1=['Hello','World',15,'Apple',None]
                  L2=[x for x in L1 if isinstance(x,str)]
                  L3=[x.lower() for x in L2]
                  print(L3)
  4.5 Generator
               #列表容量有限，在循环过程中一边循环一边计算后续元素，就是生成器;
               >>>g=(x*x for x in range(10))                #创建generator的第一种方法：将列表生成式的[]改成();
               >>>for n in g:
                    print(n)                                #for循环打印出generator的每一个元素;
               >>>def fib(max):                             #创建generator的第二种方法，将函数的'print()'换成'yield()';
                    n,a,b=0,0,1                             #适用于算法复杂，列表生成式无法实现;
                    while n<max:
                       yield(b)
                       a,b=b,a+b
                       n=n+1
                    return 'done'	    
               >>>for n in fib(6)
					print(n)            #拿不到return的返回值；
			   >>>o=fib(4)              #调用generator时，首先要生成一个generator对象，然后用next()不断获得下一个返回值(不常用);
			      next(o)
				  next(o)
  4.6 Iterator
               #
					
	           