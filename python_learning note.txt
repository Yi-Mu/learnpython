#-*-  coding:utf-8  -*-

1.Installation and instruction
  1.1 Advanced programming languages usually provide a relatively complete base code library that allows you to call directly.Python provides us with code libraries covering the network,files,GUI,database,text and so on.In addtion to the built-in liarbry,Python also has a large number of third-party libraries;
  1.2 Installation
    a.'python-3.5.2-amd64',and remember to check "Add Python 3.5 to PATH",then click 'Install Now' and it's OK;
	b.After Installation,'Win+R','cmd',enter'python'and '>>>'occurs show that installing successfully;
	c.Files in Python:end with '.py',which need interpreter to execute;There're many interpreters such as IPython,PyPy,Jython and IronPython, but the most popular is CPython come with installation originally.
  1.3 Insructions
    a.'Command line' mode and 'Python interactive' mode: 
	  'Command line': shows 'C:\>',execute '.py' files(enter'python',and come to the later mode);
	        #wead:run the whole codes in one time,and less interactive;
	  'Interactive': shows '>>>',results will be shown immediately whenever you enter the codes;
	        #weak:can not save,click the codes again whenever you want to run;
	b.Text editor
	  advice you to use Notepad++,Word and notebook from windows are forbidden;
	        #from discussions above,there's a good way: Writing codes in the Notepad++ while open interactive window at the same time,copy part of the codes to command lines for vertification if needed, great idea!
2.Operation
  2.1 print and input
      >>>input()
      >>>print()
	  >>>exit()                 #exit from 'Python interactive'mode to 'command line'mode;
	  >>>print('hello, world')  #'string' must enter with '';
	  >>>print('The quick brown fox','jumps over','the lazy dog')    #',' denotes 'space' in the results;
	  >>>print(300)             #no need to enter 'Integer' with ''; 
	  >>>print('100 + 200 =',100+200)                                #the formal denotes 'string' rather than 'integer';
	  >>>name=input('Please enter your name: ')                      #'xxx' denotes prompt informatin which is better than not;
	     print('Hello,',name)
  2.2 indentation
      When statement end with ':',the next indentation is regarded as 'code block';
            #strength:fored to write format codes;You'd better to resist "4 spaces" indentation in Notepad++;	          
	        #weak:'copy-paste' is not supported,you must check indentation after paste;
      Sensitive to uppercase letters and lowercase ones,pay attention to it;
	  Set up 'Tab' equals '4 spaces' in Notepad++ and don't mix them.
  2.3 Data type and variables
    a.Integer: >>>100
	           >>>-8080
			   >>>0xa5b4c3d2            #Hexadecimal is more convinient in computer sometimes beginnig with '0x';
			                            #there's no size limitation in integer different from other languages;
	b.Float:   >>>1.23
			   >>>1.2e-5
			   >>>4.52e9                #integer is always accurate,while float is a litter error sometimes;
			                            #there's no size limitation too,but too large shows 'inf'!
	c.String:  >>>"I'm OK!"             #I'm OK!
	           >>>'I\' \"OK\"!'         #I'm "OK"! There're many escaped characters such as '\n','\t','\\';
			   >>>print(r'\\\t\\')      #\\\t\\, not escaped;
			   >>>print('''line1
			   ...line2
			   ...line3''')             #mulity lines;
    d.Boolean: >>>True and False        #False
	           >>>True or False         #True
			   >>>not True              #False
			   >>>3>5                   #False
			   >>>not 3>5               #True
    e."Nnoe":  a special value, not equals to 0;
	                                    #many other data types such as list,dictionary,customize et al,in the following;
	f.Variables:
	           dynamic language which means a variable can be assigned many times,even with different data type.
	g.Constants:
	           in general,we use names all with uppercase letters to denote constant,like: 
			   >>>PI=3.14159265359;
    f.Addtions about division:
	           >>>10/3                  #3.333333333333335
	           >>>9/3                   #3.0
			   >>>10//3                 #3
			   >>>10%3                  #1
  2.4 String and coding
    a.ASCII:   #One bytes; contains 127 characters(Enlish letters,numbers and some symbols);
	  Unicode: #Two bytes in general; support all the languages in the world of course Chinese;
	  UTF-8:   #Changed length bypes(considering RAM), and in fact it contains ASCII; 
	           #In mordern computer society, Unicode used in RAM while UTF-8 used in transporting;
			   #and they are transformed into the other when saving or transporting;
	b.Python with Unicode(that is, support many languages)
	           >>>print('包含中文的str')
			   >>>ord('A')              #get the integer representations of the character 'A' in Unicode;
			   >>>ord('中')
			   >>>chr(66)               #get the character representations of the integer '66' in Unicode;
			   >>>chr(25991)
    c.Encode() and Decode()
	           >>>'ABC'.encode('ascii')  #'str' in RAM with Unicode(like 'ABC'), 'bytes' in transporting with UTF-8(like b'ABC');
			   >>>'中文'.encode('utf-8') #str '中文' transform into bypes in UTF-8;
			   >>>b'ABC'.decode('ascii') #bypes 'ABC' transform into str in ASCII;
			   >>>b'\xe4\xb8\xad\xe6\x96\x87'.decode('utf-8')
	d.length   >>>len('ABC')             #how many characters dose string'ABC' contain;
	           >>>len('中文')
    f.Most important(ensure there're no messy codes in Chinese)!!!
	           #Persist transform between str adn bypes with UTF-8,that is: When writing Notepad++;
			   #the first line is "#-*- coding: utf-8 -*-" and ensure "Encode in UTF-8 without BOM" in Notepad++;
	g.Format:  >>>'Hi, %s, you have $%d'%('Bob',100000)   #'%d'(integer),'%f'(float),'%s'(string),'%x'(for hexadecimal);
	           >>>'%3d-----%05d'%(8,8)                    #'  8-----00008';
			   >>>'%.2f'%3.1415926                        #'3.14'
			   >>>'Age:%s;Gender:%s'%(25,True)            #'%s'always in work if you don't know what to use, all chnge to string;
			   >>>'growth rate: %d %%'%89                 #'growth rate: 89%';
  2.5 Another two data types: list and tuple
    a.list(can change)
	           >>>classmate=['Michael','Bob','Tracy']     
			   >>>len(classmate)                          #3
			   >>>classmate[0]                            #'Michael'
			   >>>classmate[2]                            #'Tracy'
			   >>>classmate[-1]                           #'Tracy'
			   >>>classmate[-3]                           #'Michael'
			   >>>classmate.append('Adam')                #['Michael','Bob','Tracy','Adam']; an append an element in the end;
			   >>>classmate.insert(1,'Jack')              #['Michael','Jack','Bob','Tracy','Adam']
			   >>>classmate.pop(1)                        #['Michael','Bob','Tracy','Adam'];delete the element in '1' position;
			   >>>classmate.pop()                         #['Michael','Bob','Tracy']; delete the last element;
			   >>>classmate[1]='Sarah'                    #['Michael','Sarah','Tracy']
			   >>>L=['Apple',1234,True]                   #different data types in a list;
			   >>>s=['python','java',['asp','php'],'scheme']        #one list is in another list; s[2][1]='php';
			   >>>L=[]                                    #empty list, len(L)=0;
			   >>>['c','b','a'].sort()                    #['a','b','c'];
	b.tuple(cannot change)                 
	           >>>classmate=('Michael','Bob','Tracy')     
			   >>>classmate[0]
			   >>>classmate[-1]                           #just index, cannot append,insert,pop or assignment;
			   >>>t=()                                    #empty tuple;
			   >>>t=(1,)                                  #tuple with only one element; ','is needed; t=(1)=1 otherwise;
			   >>>t=('a','b',['A','B'])                   
			      t[2][0]='X'
				  t[2][1]='Y'
			   >>>t                                       #('a','b',['X','Y']);tuple cannot change while list can change;
  2.6 conditional judgement
	           #if <condition1>:<operation1>; elif<condition2>:<operation2>; else:<peration3>; note that Python use INDENTATION;
	           #don't forget ':';
	           >>>if x:
			          print('True')                       #the condition can be wrote shortening;
			   >>>birth=int(input());                     #input() return 'str',int()/float() can change it to integer/float;
  2.7 loop:
               >>>list(range(10))                         #[0,1,2,3,4,5,6,7,8,9]
			   >>>sum=0
			      for x in [1,2,3,4,5,6,7,8,9,10]:
					sum=sum+x
				  print(sum)                              #sum from 0 to 10;
			   >>>sum=0
			      for x in range(101):
					sum=sum+x
				  print(sum)                              #sum from 0 to 100;
			   >>>sum=0
			      n=99
				  while n>0:
					sum=sum+n
					n=n-2
				  print(sum)                              #sum 1,3,5,...,99;
			   >>>n=1
			      while n<=100:
					print(n)
					n=n+1
				  print('END')                            #1,2,3,...,100,END;
			   >>>n=1
			      while n<=100:
					if n>10:
						break                             #'break': end the loop in advance;
					print(n)
					n=n+1    
				  print('END')                            #1,2,3,4,5,6,7,8,9,10,END;
			   >>>n=0
			      while n<10:
					n=n+1
					if n%2==0:
						continue                          #'continue': end current loop and continue with next loop;
					print(n)                              #1,3,5,7,9;
		       #in general,'break' and 'continue' must cooperate with 'if';
			   #Don't use 'break' and 'continue' abusely,most loops don't need them or can change to a form without them;
			   #Sometimes 'dead loops' occurs, and 'Ctrl+C' quit;
  2.8 Dict and Set
    a.         >>>a={'Michael':95,'Bob':75,'Tracy':85}    #creat a dictionary;
			   >>>a['Michael']                            #show the value through the key;
			   >>>a['Adam']=67                            #add new element;
			   >>>a['Bob']=98                             #change value of an exist key;
			   >>>a.get('Thomas',-1)                      #check if "Thomas" in keys, if not,return -1;
			   >>>a.pop('Bob')                            #delete element;
			           #there's no order in dictionary; dict use 'space' to swap 'time';
					   #dict in conditions need to search "quickly",One thing to remember is KEY cannot change;
					   #That is, 'String' and 'Integer' can be keys while 'List' cannot;
    b.Set      >>>b=set([1,2,3])                          #creat set; a set of keys like dict except without values;
	           >>>b=set([1,1,2,2,3])                      #{1,2,3}; keys in set cannot repeat;
			   >>>b.add(5)                                #{1,2,3,5};
			   >>>b.remove(3)                             #{1,2,5};
			   >>>s1=set([1,2,3])
			      s2=set([2,3,4])
				  s1&s2                                   #{2,3};
				  s1|s2                                   #{1,2,3,4};
			                                              #'string' and 'integer' can be elements while 'list' cannot;
	c.Does String really cannot change?
               >>>a='abc'
			      a.replace('a','A')
			   'Abc'
			   >>>a                                       #'abc';
3.Functions
  3.1 call on built-in functions
               #help(abs) check informations and all the built-in functions: https://docs.python.org/3/library/functions.html#abs ;
			   >>>abs(-20)                                #20;
			   >>>max(20,34,-5,29308)                     #29308;
			   >>>int('123')                              #123
			   >>>int(12.34)                              #12
			   >>>float('12.34')                          #12.34
			   >>>str(1.23)                               #'1.23'
			   >>>str(100)                                #'100'
			   >>>bool(1)                                 #True
			   >>>bool('')                                #False
			   >>>c=abs
			      c(-2)                                   #2; assign a function with a nickname;
			   >>>hex(255)                                #'0xff';
			   #if there're wrongs when calling on the functions, learn to see the English messages;
  3.2 definition functions
               >>>def move(x,y,step,angle=0):             #set initial value for parameters;
					import math                           #import built-in pack if needed;
					nx=x+step*math.cos(angle)             
					ny=y-step*math.sin(angle)
					return nx,ny                          #more values with only one 'return' for codes end after meet first one;
			   >>>x,y=move(100,100,60,math.pi/6)          #the return values are in a tuple!
			   >>>def myabs(x):
					if not isinstance(x,(int,float)):     #You'd better to check the data type first!
						raise TypeError('bad operand type')
					if x>=0:
						return x
					else:
						return -x                         #I have to emphasize again that 'Tab','space' can not mixed in Notepad++;
			   #if the 'xxx.py' with only customize functions, check the directory first and 'from xxx import <func_name>';
			   >>def nop():
					pass                                  #nothing to do;
			   >>>if age>=18:
					pass                                  #'pass'as placeholder,can add sth later,will be error without it;
  3.3 parameters of a function
    a.位置参数
	           >>>def power(x,n):
					s=1
					while n>0:
						n=n-1
						s=s*x
					return s
			   >>>power(5,3)
	b.默认参数
	           >>>def enroll(name,gender,age=6,city='Beijing'):
					print('name:',name)
					print('gender:',gender)
					print('age:',age)
					print('city:',city)
			   >>>enroll('Sarah','female',city='Tianjin') #位置参数在前，默认参数在后;
			                                              #默认参数必须指向不变对象；
    c.可变参数
	           >>>def calc(*numbers):
					sum=0
					for n in numbers:
						sum=sum+n*n
					return sum
			   >>>calc(1,3,4,5,6)                         #接收任意个参数，内部接收的是一个tuple;
			   >>>n=(1,3,4,6,7,7,3,4,5,6,2,3)     
			      calc(*n)                                #把list或tuple作为可变参量输进去，常见且相当有用;
	d.命名关键字参数
	           >>>def person(name,age,*,city,job):
					print(name,age,city,job)
			   >>>person('Jack',34,city='Beijing',job='Engineer')   #'*'后的是命名关键字参数,必须传入参数名，这和前的位置参数不同;
	e.关键字参数
	           >>>def person(name,age,**kw):
					print(name,age,kw)
			   >>>person('Bob',45,city='Beijing,job='Engineer')     #关键字参数，可以传入任意个数;
			   >>>e={'city':'Beijing','job':'Scientist'}
			      person('Jack',56,**e)                             #相当有用的写法;
    f.summarize and application                            #参数组合的顺序必须是：位置，默认，可变，命名关键字，关键字参数;
	           >>>def f1(a,b,c=0,*args,**kw):
					print(a,b,c,args,kw)
			   >>>def f2(a,b,c=0,*,d,**kw):
					print(a,b,c,d,kw)
			   >>>f2(1,2,d=99,ext=98)
			   >>>f1(3,4,'a','b',r=4,t=9)
			   >>>args1=(1,2,3,4,5,6,7)
			      kw1={'x':3,'y':3'}
				  f1(*args1,**kw1)                         #args1这个tuple的长度可以任意，因为*args就接收tuple;
			   >>>args2=(2,3,4)
			      kw2={'x':3,'d':6}
				  f2(*args2,**kw2)                         #args2长度只能是3，因为其后的命名关键字参数必须写关键字,即d=xxx,且kw必须包含'd':xxx;
			   ###对于任意函数，都可以通过类似'func(*args,**kw)的方式调用，无论其参数怎样定义；
			   ###*args是可变参数，接收tuple；**kw是关键字参数，接收dict；*args和**kw是默认的习惯写法；
			   >>>def hello(greeting,*args):
					if len(args)==0:
						print('%s!'%greeting)
					else:
						print('%s, %s!'%(greeting,', '.join(args)))
			   >>>def score(**kw):
					print('   Name Score')
					print('-------------')
					for name,score in kw.items():          #'.items()'的使用
						print('%10s  %d'%(name,score))
					print()
			   >>>def info(name,*,gender,city='Beijing',age):
					print('Personal Info')
					print('-------------')
					print('    Name: %s'%name)
					print('  Gender: %s'%gender)
					print('    City: %s'%city)
					print('     Age: %s'%age)
	                print()                                #'print()'的使用
  3.4 Recursion functions
               >>>def fact(n):
					if n==1:
						return 1
					else:
						return n*fact(n-1)                 #递归的逻辑比循环清晰，但是要防止溢出;
4. Advanced features
  4.1  在Python中，代码不是越复杂越好，而是越简单越好；代码越少，开发效率越高；1行代码能解决绝不用5行；
  4.2 Slice
               >>>L=list(range(100))                       #Slice十分有用，创建0-99的序列；
			   >>>L[:10]             
			   >>>L[-10:]
			   >>>L[10:20]
			   >>>L[:10:2]
			   >>>L[::5]
			   >>>L[:]
			   >>>(1,2,3,4,5)[:3]
			   >>>'ABCDFRG'[:3:2]
  4.3 Iteration(对list，tuple，dict,string通过for循环来遍历，称为迭代)
               >>>d={'a':1,'b':2'c':3}
			      for key in d:
					print(key)
				  for value in d.values():
					print(value)
				  for k,v in d.items():
					print(k,v)                              #分别迭代dict的key，values，key和values;
			   >>>for a in 'ABC':                           #迭代字符串;
					print(a)
			   >>>for a,b in enumerate(['a','b','c'])       #对list迭代很简单，但希望出现下标,用'enumerate';
					print(a,b)
			   >>>for x,y in [(1,1),(2,4),(3,9)]:           #同时引用两个变量;
					print(x,y)
			   >>>from collections import Iterable:
				  isinstance('abd',Iterable)
				  isinstance([1,2,3],Iterable)
				  isinstance(123,Iterable)                  #判断一个对象是否是可迭代对象; 
  4.4 List comprehensions(运用列表生成式可以快速生成list，代码十分简洁)
               >>>[x*x for x in range(1,11)]
			   >>>[x*x for x in range(1,11) if x%2==0]
			   >>>[m+n for m in 'ABS' for n in 'XDE']       #两层循环，三层及以上很少用到;
			   >>>import os
			      [d for d in os.listdir('.')]              #列出当前目录下的所有文件和目录名;
			   >>>d={'x':1,'y':2,'z':3}
			      [k+'='+v for k,v in d.items()]
			   >>>L=['Hello','World','IBM','Apple']
			      [s.lower() for s in L]                    #把list中的所有字符串变成小写;
			   >>>L1=['Hello','World',15,'Apple',None]
                  L2=[x for x in L1 if isinstance(x,str)]
                  L3=[x.lower() for x in L2]
                  print(L3)
  4.5 Generator
               #列表容量有限，在循环过程中一边循环一边计算后续元素，就是生成器;
               >>>g=(x*x for x in range(10))                #创建generator的第一种方法：将列表生成式的[]改成();
               >>>for n in g:
                    print(n)                                #for循环打印出generator的每一个元素;
               >>>def fib(max):                             #创建generator的第二种方法，将函数的'print()'换成'yield()';
                    n,a,b=0,0,1                             #适用于算法复杂，列表生成式无法实现;
                    while n<max:
                       yield(b)
                       a,b=b,a+b
                       n=n+1
                    return 'done'	    
               >>>for n in fib(6)
					print(n)            #拿不到return的返回值；
			   >>>o=fib(4)              #调用generator时，首先要生成一个generator对象，然后用next()不断获得下一个返回值(不常用);
			      next(o)
				  next(o)
  4.6 Iterator
               #凡是可用于for循环的对象都是Iterable对象/可迭代对象, 如list,tuple,dict,str和generator;
			   #凡是可用于next()的对象都是Iterator对象/迭代器对象，表示一个惰性计算的序列,如generator和iter(list),iter(tuple),iter(dict),iter(str);
			   #list,tuple,dict,str:不是Iterator，却可以通过Iter()转变；
			   #Iterator表示一个数据流，可以被next()不断调用，直到没有数据时抛出StopIteration错误，我们不知其长度，是惰性的;
			   #Iterator甚至可以表示一个无限大的数据流，如全体自然数，而list不可能存储所有自然数;
			   >>>from collections import Iterable
			   >>>isinstance([],Iterable)
			   >>>isinstance([],Iterator)
			   >>>isistance(iter([]),Iterator)
5. Functional programming(函数式编程)
  5.1 #函数式编程是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，任意一个函数，输入确定输出就确定(没有副作用)；
      #一个特点就是: 允许把函数本身作为参数传入到另一个函数，还允许返回一个函数; Python部分支持，但因为使用变量，不是纯函数式编程语言;
  5.2 High-order function
      >>>f=abs
	     f(-10)                     #变量可以指向函数;
	  >>>def add(x,y,f):
			return f(x)+f(y)        
	  >>>add(-5,6,abs)              #传入函数;
  5.3 map/reduce(接收一个函数和一个序列)
      >>>list(map(str,[1,2,3,4,5,6]))       #['1','2','3','4','5','6']
	  >>>def f(x):
			return x*x
	     list(map(f,[1,2,3,4,5])            #[1,4,9,16,25]
	  >>>from functools import reduce
	     def add(x,y):
			return x+y
		 reduce(add,[1,3,5,7,3])            #sum([1,2,3,4,5])
	  >>>def fn(x,y):
			return x*10+y
		 reduce(fn,[1,4,7,8,3])             #14783
  5.4 filter(接收一个函数和一个序列)
      >>>def is_odd(n):
			return n%2==1                            #返回值是True or False，filter根据T/F决定保留还是丢弃该元素;
		 list(filter(is_odd,[1,2,3,4,5,5,7,8,9]))    #删除list中的偶数，只保留奇数;
	  >>>def not_empty(s):
			return s and s.strip()                   #返回值T/F，'.strip()'删除字符串前后的空格留下的部分;
		 list(filter(not_empty,['a','','b',None,'c','  ']))   #把一个list中的空字符串删掉;
	  #filter返回的是Iterator，是一个惰性序列，需要list()获取所有结果并返回;
	  #具体例子见'primes()' and 'palindrome()';
	  #如何定义一个筛选函数是最重要的，事实上，筛选函数返回值是True or False即可;
	  >>>def is_palindrome(n):
			return str(n)==str(n)[::-1] and len(str(n))>1
		 list(filter(is_palindrome,range(1000)))
	  #filter(func(n),xxx)，有些func后是有输入的，这时需要循环，而输出T/F的func不需要跟着输入;
  5.5 Sorted
      >>>sorted([36,5,-12,9,-21])
	  >>>sorted([36,5,-12,9,-21],key=abs)
      >>>sorted(['bob','about','Zoo','Credit'])
	  >>>sorted(['bob','about','Zoo','Credit'],key=str.lower)
	  >>>sorted(['bob','about','Zoo','Credit'],key=str.lower,reverse=True)
	  #key函数非常强大，可以自己定义;
  5.6 返回函数
      >>>def lazy_sum(*args):
			def sum():
				ax=0
				for n in args:
					ax=ax+n
				return ax
			return sum                  #高阶函数可以把函数作为结果值返回;
	  >>>f=lazy_sum(1,3,5,7,9)          #<funtion lazy_sum.<locals>.sum at xxx>调用函数时，返回的不是结果而是求和函数;
	  >>>f()                            #25; 调用f时，才真正计算结果;
	  >>>f2=lazy_sum(1,3,5,7,9)
         f==f2                          #False; 调用lazy_sum时，每次调用都会返回一个新的函数，即使传入相同的参数,调用结果互不影响;	 
      #这种称为'闭包(closure)'的程序结构有很大的威力；
	  #牢记：返回函数不会立即执行，直到调用才执行，因此返回函数不要引用任何循环变量，或者后续会发生变化的变量;
  5.7 匿名函数
      >>>list(map(lambda x: x*x,[1,2,3,4,5]))  #lambda函数: 冒号前是参数，冒号后表达式结果就是结果；
	  >>>f=lalmbda x:x*x
	     f(5)                                  #lambda函数是一个函数对象，只有把它赋值给一个变量，再利用变量调用函数才能得到结果；
      #限制：只能有一个表达式；
  5.8 Decorator
      >>>def now():
			print('2017-8-13')
		 now.__name__                          #函数对象有一个__name__属性，可以拿到函数的名字；
      >>>import functools       #要增强函数的功能，如，在函数调用前后自动打印日志，但又不希望修改now()函数的定义；
	     def log(func):         #这种在代码运行期间动态增加功能的方式，称为“装饰器”；实际上，他是一个返回函数的高阶函数；
			@functools.wraps(func)
			def wrapper(*args,**kw):
				print('call %s():'%func.__name__)
				return func(*args,**kw)
			return wrapper
		 @log                   #需要把decorator置于函数的定义处；
		 def now():
			print('2017-8-13')
		 now()                  #call now():2017-8-13;
	  >>>def logger(text):      #如果decorator本身需要传入参数，比如要定义logger的文本；
			def decorator(func):
				@functools.wraps(func)   #该句的作用是把 now.__name__=wrapper 改回原来的 now；
				def wrapper(*args,**kw): 
					print('%s %s():'%(text,func.__name__))
					return func(*args,**kw)
				return wrapper
			return decorator
		 @logger('DEBUG')
		 def today():
			print('2017-8-13')
		 today()                 #DEBUG today():2017-8-13;
		 print(today.__name__)   #'today';
	  #decorator可以增强函数的功能，定义起来虽然有点复杂，但使用起来非常灵活和方便；
  5.9 Partial function('偏函数',import functools)
      >>>当函数的参数个数太多，需要简化时，'functools.partial'可以创建一个新函数，固定住原函数的部分参数，从而在调用时更简单;
	  >>>int('12345',base=16)     #传入base参数，实现16进制的转换;
	  >>>import functools
	     int2=functools.partial(int,base=2)
	  >>>int2('1010101')          #这样就可以大量转换二进制字符串，而不用每次都要传入base=2那么麻烦;
	  >>>int2('1010101',base=10)  #当然，之前只是设定了默认值，完全可以传入其他值;
	  >>>max2=functools.partial(max,10)
	     max2(2,3,4)              #'10';
	  >>>牢记，创建偏函数时，实际上接收的是函数对象，*args，*kw这3个参数，'base=10'传入的是*kw, 而'10'传入的是*args,会自动加到左边;
6. Module
  6.1 >>>Build-in functions(68):
            abs,all,any,ascii,bin,bool,bytearray,bytes,callable,chr,classmethod,compile,complex,delattr;
			dict,dir,divmod,enumerate,eval,exec,filter,float,format,frozenset,getattr,globals,hasattr,hash;
			help,hex,id,input,int,isinstance,issubclass,iter,len,list,locals,map,max,memoryview;
			min,next,object,oct,open,ord,pow,print,property,range,repr,reversed,round,set;
			setattr,slice,sorted,staticmethod,str,sum,super,tuple,type,vars,zip,__import__;
      >>>一个'.py'文件就是一个模块(Module)；可以避免函数名和变量名冲突，因为他们存在不同模块里；但自己编写模块，不要与内置函数名字冲突;
	  >>>为了避免模块名冲突，引入包(Package)；每个包目录下都有'_init_.py'，它必须存在，'mypack'包内模块'abc.py'就成了'mypack.abc';
  6.2 使用模块
      >>>#-*- utf-8 -*-            #标准注释，表示'.py'文件本身使用标准utf-8编码；
	     'a test module'           #任何模块代码的第一个字符串都被是视为模块的文档注释；
		 __author__='Yi Mu'        #把作者写进去，公开源代码后别人就可以瞻仰你的大名；
		 import xxx                #第一步是导入需要用到的模块；
		 ......
      >>>作用域
	  >>>abc,x123,PI               #函数和变量名是公开的，public，可以被直接引用；
	     __author__, __name__      #特殊变量，可以被直接引用，但是有特殊用途，我们自己的变量一般不要用这种变量名；
		 _abc, __abc               #这样的函数或变量名是非公开的，private，不应该被直接引用；
	  >>>def _private_1(name):
			return 'Hello, %s'%name
		 def _private_2(name):
			return 'Hi, %s'%name
		 def greeting(name):
			if len(name)>3:
				return _private_1(name)    #我们在模块里公开greeting()函数，而把内部逻辑用private函数隐藏了，调用greeting()不用关心内部
			else:                          #private函数细节，这是一种非常有用的代码封装和抽象的方法；
				return _private_2(name)    #即：外部不需要的函数定义为private，只有外部需要引用的函数才定义为public；
  6.3 安装第三方模块
      >>>通过包管理工具pip完成：确保安装Python时勾选了pip和Add python.exe to Path; 在命令行运行'pip',未找到命令,则需重新安装Python添加pip;
	  >>>安装第三方库，在'pypi.python.org'找到库的名称，在命令行输入"pip install Pillow"(以Pillow为例)；
	  >>>加载模块时，Python会在指定的路径下搜索'.py'文件，找不到会报错；搜索路径放在sys模块的path变量中；
	  >>>import sys
	     sys.path
	  >>>如果要添加自己的搜索目录，设置环境变量PYTHONPATH；
7.面向对象编程
      #Object Oriented Programming(OOP),面向对象编程，把对象作为程序的基本单元，一个对象包含数据和操作数据的函数；
	  #Python中，所有数据类型都可以视为对象，当然也可以自定义对象，自定义对象数据类型就是类(class);
	  #数据封装，继承和多态是面向对象的三大特点；
	  #类(class)，实例(instance)，属性(property)，方法(method)；
  7.1 类和实例,数据封装
      >>>class Student(object):  #定义类，类名通常是大写开头的单词，紧接着(object)表示该类从哪个类继承下来的，如果没有合适的继承类，就是object；
			def __init__(self,name,score):  #创建类的时候，把一些属性绑上去；通过特殊的__init__方法；注意第一个参数必须是self，其余可用*args,**kw;
				self.name=name
				self.score=score
			def print_score(self):   #在类的内部定义访问数据的函数，把数据“封装”起来了，这些封装函数称为类的方法，第一个参数self，其余*args,**kw；
				print('%s: %s'%(self.name,self.score))
			def get_grade(self):
				if self.score>=90:
					return 'A'
				elif self.score>=60:
					return 'B'
				else:
					return 'C'
		bart=Student('Bart Simpson',59)    #创建类Student的实例，同时要传入和__init__方法匹配的参数，self不用传；
		lisa=Student('Lisa Simpson',87)
		bart.print_score()                 #调用一个方法，在实例上直接调用，self不用传，其余正常传入；
		lisa.get_grade()                   #外部看Student类，创建需要给出name和score，如何打印在内部定义被封装，调用容易，不知内部细节；
		bart.age=8    #可以自由地给实例绑定类不存在的属性；
		bart.age      #8；虽然两个实例是属于同一个类的不同实例，但拥有的变量名称有可能不同；
		lisa.age      #不存在！
  7.2 访问限制
      >>>class Student(object):  #由于通过外部可以自由修改一个实例的name，score属性，则'__name','__score'变成private，外部不能访问；
			def __init__(self,name,score):   #__XXX__是特殊变量，可以直接访问，不是private；
				self.__name=name             #_name，只有一个下划线的，外部也可以访问，但意思是’虽然可以被访问，但请将我视为private‘；
				self.__score=score
			def get_name(self):  #想要从外部获取name和score，增加方法get_name,get_score;
				return self.__name
			def get_score(self):
				return self.__score
			def set_score(self,score):   #还想从外部修改score，增加set_score方法，在方法中还可以对参数检查，避免传入无效的参数；
				if 0<=score<=100:
					self.__score=score
			def print_score(self):
				print('%s: %s'%(self.__name,self.__score))
			bart=Student('Bart Simpson',59)
	  >>>bart.__name               #'Student' object has no attribute '__name';外部无法访问；
	  >>>bart.__name='New name'    #这是错误写法；
	  >>>bart.__name     #'New name', 表面上成功设置了__name，实际上这个和class内部的__name变量不是一个变量！该代码相当于给bart新增一个变量；
	  >>>bart.get_name()           #'Bart Simpson';
  7.3 继承和多态
      >>>class Animal(object):            
			def run(self):
				print('Animal is running...')
		 class Dog(Animal):        #我们定义class的时候，可以从现有的class继承，新类称为子类(subclass),被继承的类称为父类；
			def run(self):
				print('Dog is running...')
		 class Cat(Animal):        #继承的好处是获得了父类的全部功能，因此即使Cat只定义了pass，也会自动拥有run方法；
			def run(self):         #可以对父类的run方法改进；当子类和父类存在相同的方法时，子类的run覆盖了父类的run，运行时会调用子类的：多态！
				print('Cat is running...')
			def eat(self):         #对子类Cat增加方法；
				print('Eating meat...')
	  >>>a=Dog()
	     a.run()
	  >>>a=list()                   #我们定义一个class时，就是定义一种新的数据类型，和Python自带的str，list，dict没有什么两样；
	     b=Animal()                 #a是list类型，b是Animal类型，c是Cat类型；Animal()就是Animal类的一个实例，因为他没有参数输入，因此是空括号；
		 c=Cat()
		 isinstance(a,list)         #判断一个变量是否是某个类型；
		 isinstance(c,Cat)
	     isinstance(c,Animal)       #Cat是Animal类型，而Animal不是Cat类型；子类的数据类型可以看做是父类，反之则不成立：多态！
		 isinstance(b,Cat)
	  >>>def run_twice(x):
			x.run()
			x.run()
		 class Tor(Animal):
			pass
		 run_twice(Animal())        #输入Animal的实例；打印出'Animal is running...'；
		 run_twice(Dog())           #输入Dog的实例；打印出'Dog is running...'；因为Dog有自己的run()方法；
		 run_twice(Tor())           #输入Tor的实例；打印出'Animal is running...'；因为Tor没有自己的run(),就打印Animal的run();
	  #多态的好处就是，当我们传入Dog，Cat,Tor时，只需要接收Animal类型就可以了，按照Animal类型操作即可；
	  #由于Animal类型有run方法，因此，传入的任意类型，只要是Animal类或子类，就会调用实际类型的run方法，这就是多态的意思；
	  #对于一个变量，我们只需要知道他是Animal类型，无需确定知道他的子类型，就可以放心调用run()方法，而具体作用在什么对象上，由确切类型决定；
	  >>>对于静态语言(如Java)，如果要传入Animal类型，则对象必须是Animal类或他的子类，否则不能调用run方法；
	  >>>对于Python这样的动态语言来说，不一定要传入Animal类型，只要保证传入的对象有一个run()方法就可以了(动态语言的“鸭子类型”)；
	  #继承可以把父类所有功能都拿过来，子类只要新增自己特有的方法，也可以把父类不合适的方法覆盖重写；
	  #动态语言的鸭子类型特点决定了继承不像静态语言那样是必须的；
  7.4 获取对象信息
      [a.type]             #判断对象类型；
	  >>>type(123)
	     type('abc')
	     type(None)        #基本类型
	  >>>type(abs)
	     dog=Dog(),type(dog)      #函数或者类，也可以判断；
	  >>>type(123)==int
	     type('abc')==str   #在if语句中判断；
	  >>>def f():           
			pass
		 import types       #判断一个对象是否是函数，载入types模块；
		 type(f)==types.FunctionType
		 type(abs)==types.BuiltinFunctionType
		 type(lambda x:x)==types.LambdaType
		 type((x for x in range(10)))==types.GeneratorType
	  [b.isinstance]
	  >>>a=Dog()            #判断class的类型；
	     isinstance(a,Dog)
		 isinstance(a,Animal)
	  >>>isinstance('a',str)   #能用type()判断的基本类型也能用isinstance()判断；
	     isinstance(123,int)
		 isinstance([1,2,3],(list,tuple))   #还能够判断某个变量是否是某些类型中的一种；
	  [c.dir]               #获得一个对象所有的属性和方法；
	  >>>dir('ABC')         #返回一个包含字符串的list，获得str对象'ABC'所有的属性和方法；
	  >>>len('ABC')         #其中__xxx__的属性和方法在Python中有特殊用途，比如__len__返回长度；
	     'ABC'.__len__()    #该方法和上式等价；
		 'ABC'.lower()      #剩下的都是普通属性和方法，如lower()返回小写的字符串；
	  [d.getattr(),setattr(),hasattr()]     #直接操作一个对象的状态；
	  >>>class mydog(object):
			def __init__(self):
				self.x=9
			def power(self):
				return self.x*self.x
		 obj=mydog()
		 hasattr(obj,'x')    #有属性'x'吗？
		 obj.x 
		 setattr(obj,'y',19) #设置一个属性y；
		 hasattr(obj,'y')
		 getattr(obj,'y')    #获取属性y；
		 obj.y               #获取属性y；
		 getattr(obj,'z',404)   #但是getattr比obj.y的一个好处是，可以在不存在的情况下返回默认值；
		 hasattr(obj,'power') #还可以获得对象的方法；
		 getattr(obj,'power') #不能返回确切的值；
		 f=getattr(obj,'power')  
		 f()                  #可以通过赋值，或者obj.power();
	  >>>sum=obj.x+obj.y      #只有在不知道对象信息的时候，才会去获取对象信息，如果可以这样直接写；
	     sum=getattr(obj,'x')+getattr(obj,'y')  #就不要写成这样；
  7.5 实例属性和类属性
      >>>s=Student('Bob')
         s.score=90	  #给实例绑定属性的方法是通过实例变量；
	  >>>del s.score  #给Student类绑定属性直接在class中定义，所有该类的实例都可以访问；
	                  #但如果实例属性和类属性值不同，会屏蔽类属性，只有删除实例属性后，类属性才能显示；
8. 面向对象高级编程
  8.1 __slots__
      >>>class Student(object):
			pass
		 s=Student()
		 s.name='Michael'             #创建一个class的实例后，可以给实例绑定任何属性；
	  >>>def set_age(self,age):       #给实例绑定方法麻烦点，需要载入MethodType；还要先定义一个函数作为方法；
			self.age=age
		 from types import MethodType
		 s.set_age=MethodType(set_age,s)
		 s.set_age(25)                #给一个实例s绑定的属性和方法对另一个实例s2是不起作用的；
	  >>>def set_score(self,score):   #为了给所有实例都绑定方法，可以给class绑定方法；
			self.score=score
		 Student.set_score=set_score  #本来方法可以直接定义在class中，但动态绑定允许在程序运行中动态给class加上功能；
		 s.set_score(100)
		 s2.set_score(99)
	  >>>class Student(object):       #如果想要限制实例的属性，如只允许Student实例添加name和age属性；
			__slots__=('name','age')
		 s.name='Michael'
		 s.score=99                   #会报错；
		                              #需要注意的是__slots__只对当前类的实例起作用，对继承的子类不起作用，除非在子类中也定义__slots__；
  8.2 @property
      >>>class Student(object):       #为了检查参数：通过一个set_score设置成绩,get_score来获取成绩；
			def get_score(self):
				return self._score
			def set_score(self,value):
				if not isinstance(value,int):
					raise ValueError('score must be an integer!')
				if value<0 or value>100:
					raise ValueError('score must between 0~100!')
				self._score=value
	  >>>class Student(object):      #更简单的方式：既能检查参数，又能类似属性的简单方式访问变量；
			@property                #@property就是负责把一个方法变成属性调用的；
			def score(self):         #通过加上@property把一个getter方法变成属性；
				return self._score
			@score.setter            #又创建了另一个装饰器@score.setter,把一个setter方法变成属性赋值；
			def score(self,value):
				if not isinstance(value,int):
					raise ValueError('score must be an integer!')
				if value<0 or value>100:
					raise ValueError('score must between 0~100!')
				self._score=value
      >>>class Student(object):
			@property
			def birth(self):
				return self._birth
			@birth.setter
			def birth(self,value):
				self._birth=value
			@property                #还可以只定义getter方法，不定义setter方法就是一个只读属性；
			def age(self):
				return 2015 - self._birth
	  #@property广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查；
  8.3 多重继承
      >>>class Animal(object):
			pass
		class Mammal(Animal):
			pass
		class Bird(Animal):
			pass	
		class Runnable(object):
			def run(self):
				print('Running...')	
		class Flyable(object):
			def fly(self):
				print('Flying...')
	  >>>class Dog(Mammal,Runnable):   #通过多重继承，一个子类就可以同时获得多个父类的所有功能；
			pass
		class Bat(Mammal,Flyable):     #这种设计通常称为Mixin，Mixin的目的就是给一个类增加多个功能；
			pass                       #这样，在设计类的时候，优先考虑通过多重继承来组合多个Mixin的功能，而不是设计
		class Parrot(Bird,Flyable):    #多层次的复杂的继承关系；
			pass
		class Ostrich(Bird,Runnable):
			pass		
  8.4 定制类
      >>>class Student(object):
			def __init__(self,name):
				self.name=name
			def __str__(self):         #定义__str__()方法，返回一个好看的字符串；
				return 'Student object (name: %s)'%self.name
			__repr__=__str__           #__str__返回用户看到的字符串，__repr__返回程序开发者看到的；通常两者相同；
	  >>>print(Student('Micheal'))     #Student object(name: Micheal);
		 s=Student('Bob')
		 s                             #Student object(name: Bob); 若没有最后一句，返回<__main__.Student object at xxx>;
		 
	  >>>class Fib(object):
			def __init__(self):
				self.a,self.b=0,1
			def __iter__(self):        #如果一个类想被用于for...in循环，要实现__iter__方法，它返回一个迭代对象；
				return self            #for循环会不断调用该迭代对象的__next__方法拿到循环的下一个值，直到StopIteration退出循环；
			def __next__(self):
				self.a, self.b=self.b, self.a+self.b
				if self.a>1000:
					raise StopIteration()
				return self.a
			def __getitem__(self,n):   #表现得像list那样按照下标取出元素，需要实现__getitem__方法；
				if isinstance(n,int):  #判断__getitem__传入的参数是一个int还是一个切片对象slice；
					a,b=1,1
					for x in range(n):
						a,b=b,a+b
					return a
				if isinstance(n,slice):  #判断__getitem__传入的参数是一个int还是一个切片对象slice；
					start=n.start
					stop=n.stop
					if start is None:
						start=0
					a,b=1,1
					L=[]
					for x in range(stop):
						if x>=start:
							L.append(a)
						a,b=b,a+b
					return L
	  >>>for n in Fib():
			print(n)
	  >>>Fib()[19]                     #6795
	  >>>f=Fib()
	     f[:10]                        #[1,1,2,3,5,8,13,21,34,55]
		                               #没有对step参数做处理：f[:10:2];也还没有对负数做处理；__getitem__还有很多工作要做；
	          
	  >>>如果把对象看成一个dict，__getitem__的参数也可能是一个可以做key的object，如str；与之对应的是__setitem__方法，把对象视作list或dict来对集合赋值；
	  >>>最后，还有一个__delitem__方法，用于删除某个元素；通过这些方法，我们自己定义的类表现的和Python自带的list，tuple，dict没有什么区别；
	  
	  >>>class Student(object):
			def __init__(self):
				self.name='Michael'
			def __getattr__(self,attr):   #调用不存在的方法或属性时，不存在时会报错，需要__getattr__方法，动态返回一个属性；
				if attr=='score':
					return 99
				elif attr=='age':
					return lambda:25
				else:
					raise AttributeError('\'Student\' object has no attribute \'%s\''%attr)
	  >>>s=Student()
	     s.name                           #'Michael';
		 s.score                          #99;
		 s.age()                          #这样当调用不存在的属性时，会返回一个事先设定的值，当然返回函数也是完全可以的，不过要注意加();
		 s.abc                            #已有属性不会在__getattr__中查找，任意调用不存在的属性，如果没有特殊设定，默认返回None；我们可以抛出错误；
	                                      #这种方式实际上把一个类的所有属性和方法调用全部动态化处理了，不需要任何特殊手段；
										  #这种完全动态调用的特性有什么实际作用呢，作用就是，可以针对完全动态的情况做调用；					  
	  >>>class Chain(object):             #现在很多网站都搞REST API，如果要写SDK，给每个URL对应的API都写一个方法，要累死，而且API一旦改动，SDK也要改；
			def __init__(self,path=''):   #利用完全动态的__getattr__，我们可以写出一个链式调用；
				self._path=path
			def __getattr__(self,path):
				return Chain('%s/%s'%(self._path,path))
			def __str__(self):
				return self._path
			__repr__=__str__              #无论API怎么变，SDK都可以根据URL实现完全动态的调用，而且不随API的增加而改变；
	  >>>Chain().status.user.timeline.list    #'/status/user/timeline/list';
	  >>>Chain().users('Miachel').repos   #还有些REST API会把参数放到URL中，调用时需要把users替换成实际用户名；
	  
	  >>>class Student(object):           #调用实例方法时，用instance.method()来调用，能不能直接在实例本身上调用呢，需要定义__call__方法；
			def __init__(self,name):
				self.name=name
			def __call__(self):
				print('My name is %s.'%self.name)
	  >>>s=Student('Miachel')
	     s()                              #My name is Miachel.
		 s.name                           #'Miachel';
	  >>>__call__()还可以定义参数，对实例直接调用就和对一个函数直接调用一样，完全可以把对象看成函数，把函数看成对象；
	  >>>如果把对象看成函数，那么函数本身也可以在运行期间动态创建出来，因为类的实例都是在运行期间创建的，这样就模糊了对象和函数的界限；
	  >>>怎样判定一个变量是函数还是对象呢，更多时候，我们需要判定一个对象是否能够被调用：callable()函数；
	  >>>callable(Student())              #True;
	     callable(max)                    #True;
		 callable([1,2,3])                #False;
		 callable(None)                   #False;
	  >>>Python的class允许定义许多定制方法，方便生成特定的类，更多特定方法见 https://docs.python.org/3/reference/datamodel.html#special-method-names；
  8.5 使用枚举类
      >>>
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			